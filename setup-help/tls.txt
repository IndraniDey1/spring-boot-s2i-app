tls.txt

###########################
Build App and Create Image:
###########################

oc project openshift
oc new-build java:8~https://github.com/alphillips/simple-spring-boot-app.git
oc get is simple-spring-boot-app.git -n openshift
[default-route-openshift-image-registry.apps.cluster-nyc-846a.nyc-846a.example.opentlc.com/openshift/simple-spring-boot-app
image-registry.openshift-image-registry.svc:5000/openshift/simple-spring-boot-app:latest]

################################################
NO TLS and EDGE
################################################
oc new-project hello-http
oc policy add-role-to-user edit -z default

------------------- create this deployent config using the built image -----------------
cat <<EOF | oc apply -f -
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: simple-spring-boot-app
  labels:
    app: simple-spring-boot-app
spec:
  replicas: 1
  selector:
    app: simple-spring-boot-app
  template:
    metadata:
      labels:
        app: simple-spring-boot-app
    spec:
      containers:
      - name: default-container
        image: image-registry.openshift-image-registry.svc:5000/openshift/simple-spring-boot-app:latest
        resources:
           limits:
             memory: 512Mi
EOF

---------------- NO TLS ROUTE -----------------------------------------------------

$ cat <<EOF | oc apply -f -
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: simple-spring-boot-app
  labels:
    app: simple-spring-boot-app
spec:
  replicas: 1
  selector:
    app: simple-spring-boot-app
  template:
    metadata:
      labels:
        app: simple-spring-boot-app
    spec:
      containers:
      - name: default-container
        image: image-registry.openshift-image-registry.svc:5000/openshift/simple-spring-boot-app:latest
        readinessProbe:
           failureThreshold: 3
           httpGet:
             path: /api/item
             port: 8080
           initialDelaySeconds: 10
           timeoutSeconds: 1
        resources:
           limits:
             memory: 512Mi
EOF

oc create service clusterip simple-spring-boot-app --tcp=8080:8080

---------------- EDGE route -----------------------------------------------------

cat <<EOF | oc apply -f -
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: simple-spring-boot-app
  name: simple-spring-boot-app-edge
spec:
  host: simple-spring-boot-app-edge.apps.cluster-nyc-846a.nyc-846a.example.opentlc.com
  port:
    targetPort: 8080-8080
  tls:
    termination: edge
  to:
    kind: Service
    name: simple-spring-boot-app
EOF

#############################################################
Reencrypt and Passthrough
#############################################################
oc new-project hello-https

oc policy add-role-to-user edit -z default

openssl req -newkey rsa:2048 -keyout selfsigned.key -x509 -days 365 -out selfsigned.crt -subj '/DC=com/DC=mycompany/CN=myapp'

openssl pkcs12 -export -in selfsigned.crt -inkey selfsigned.key -out selfsigned.p12 -name myapp

oc create secret generic hello-keystore --from-file=keystore.p12=selfsigned.p12

oc create configmap simple-spring-boot-app --from-literal=server.ssl.key-store=/etc/keystore/keystore.p12 --from-literal=server.ssl.key-store-password=mysecret --from-literal=server.port=8443
------------------- create this deployent config using the built image --------------------------------
cat <<EOF | oc apply -f -
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: simple-spring-boot-app
  labels:
    app: simple-spring-boot-app
spec:
  replicas: 1
  selector:
    app: simple-spring-boot-app
  template:
    metadata:
      labels:
        app: simple-spring-boot-app
    spec:
      containers:
      - name: default-container
        image: image-registry.openshift-image-registry.svc:5000/openshift/simple-spring-boot-app:latest
        resources:
           limits:
             memory: 512Mi
        volumeMounts:
          - mountPath: /etc/keystore
            name: keystore-volume
      volumes:
        - name: keystore-volume
          secret:
            secretName: hello-keystore
EOF


oc set env dc/simple-spring-boot-app --from configmap/simple-spring-boot-app

---------------Route Type:  passthrough ---------------------------------------------------------------
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: simple-spring-boot-app
  name: simple-spring-boot-app-passthrough
spec:
  host: simple-spring-boot-app-passthrough.apps.cluster-nyc-846a.nyc-846a.example.opentlc.com
  port:
    targetPort: 8443-8443
  tls:
    termination: passthrough
  to:
    kind: Service
    name: simple-spring-boot-app
EOF


oc set env dc/simple-spring-boot-app --from configmap/simple-spring-boot-app
oc create service clusterip simple-spring-boot-app --tcp=8443:8443
oc get route [choose the passthrough]
NOW TEST

---------------Route Type:  reencrypt ---------------------------------------------------------------

cat <<EOF | oc apply -f -
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: simple-spring-boot-app
  name: simple-spring-boot-app-reencrypt
spec:
  host: simple-spring-boot-app-reencrypt.apps.cluster-nyc-846a.nyc-846a.example.opentlc.com
  port:
    targetPort: 8443-8443
  tls:
    termination: reencrypt
    destinationCACertificate: |-
	-----BEGIN CERTIFICATE-----
	MIIDUzCCAjugAwIBAgIJALA356K9NS1NMA0GCSqGSIb3DQEBCwUAMEAxEzARBgoJ
	kiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJk/IsZAEZFglteWNvbXBhbnkxDjAMBgNV
	BAMMBW15YXBwMB4XDTIwMDUxMTAzNDI0NVoXDTIxMDUxMTAzNDI0NVowQDETMBEG
	CgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW15Y29tcGFueTEOMAwG
	A1UEAwwFbXlhcHAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDnzsPX
	9s9AjkrCw71uNefDguiCp2RPG9teTQ+El2g/VoEQmBTa2No2mZJ2n4DOf0kKQut9
	1Yvm6eEmM+twRBAr5tc9aBQjkGxf2sgkiVsDblEF3MGpbfcnmUThjax/GLL4Y4hA
	mk5frDaiu+bekJONyD6wbJ75vFezxzCQapYLwLcQzWZvUa5BO3G4/EDA6f3Lk1eC
	r2wB4A4q8JQsIIkiwzx5bVR5JUW39SW9DhgoMjngBW59+Ss1atxGYrlh/+9KZV6z
	sw46wQ58Xg+q6XUHNVGI5/DTJ0Pxr71fBB34ccu54TItW+k6JMY4js33fTCf8nb0
	73VsGlTdvYjG6nTnAgMBAAGjUDBOMB0GA1UdDgQWBBT8Y2kkiukFeS4IjgpZYUGo
	5+4UuTAfBgNVHSMEGDAWgBT8Y2kkiukFeS4IjgpZYUGo5+4UuTAMBgNVHRMEBTAD
	AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAgHsZ7NKMkK1wgoBVglY3XY7F4dHLb7gQT
	ejKpRGQVhAlmmVFqyxgj2tEJIEBAsx0BXZT1NPrROhNu37Z/OtsGuKkBs0LvhnBA
	ESOHdvci6fxT97F1rNTvv9hZM7nT9ckct1supG/SM9Vc36p+7NULpNeZFYRcSLiU
	cOsRtaOpwrj5v6wo9/yWHZwoxeIv5L6Zn2E96/cP+UaXv7SMsvCLVJx6JFy90gCI
	Y5TxbOqncGeg2MHDV/fD4x3E1xWumqja3Y2F57GVnRIK6aHvGvbxQGL731FmqdK1
	dh8cwV+Dc3Ehn6+AH9CEAxg6mQz+HwjxgvKTQfkdMth17N155INN
	-----END CERTIFICATE-----
  to:
    kind: Service
    name: simple-spring-boot-app
EOF

oc get route [choose the reencrypt]
NOW TEST
------------------

